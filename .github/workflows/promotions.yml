name: RC Promotion

on:
  repository_dispatch:
    types: [trigger-rc-promotion]

permissions:
  contents: read

jobs:
  promote-rc:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout Infra Repository
      - name: Checkout Infra Repository
        uses: actions/checkout@v4

      # 2) Configure AWS CLI in GitHub runner
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1
          aws configure list

      # 3) Verify AWS credentials & ECR setup
      - name: Verify AWS Credentials & ECR Setup
        run: |
          echo "🔹 AWS_ECR_BACKEND_REPO=${{ secrets.AWS_ECR_BACKEND_REPO }}"
          echo "🔹 AWS_ECR_FRONTEND_REPO=${{ secrets.AWS_ECR_FRONTEND_REPO }}"
          echo "🔹 AWS Caller Identity:"
          aws sts get-caller-identity --query 'Account' --output text || echo "🔴 AWS CREDENTIALS INVALID"

      # 4) Extract release version
      - name: Extract Release Version
        id: extract_version
        run: |
          RELEASE_VERSION="${{ github.event.client_payload.release_tag }}"
          if [ -z "$RELEASE_VERSION" ]; then
            echo "❌ ERROR: RELEASE_VERSION is empty!"
            exit 1
          fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RC_TAG=rc${RELEASE_VERSION#v}" >> $GITHUB_ENV
          echo "✅ Release version: $RELEASE_VERSION → Tagging as: rc${RELEASE_VERSION#v}"

      # 5) Save SSH key to connect to EC2
      - name: Save Private Key for SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > github-actions.pem
          chmod 600 github-actions.pem

      # 6) SSH into EC2 & Promote ECR Images
      - name: SSH into EC2 & Promote ECR Images
        run: |
          echo "🚀 Connecting to EC2 and promoting images in ECR..."
          
          ssh -o StrictHostKeyChecking=no -i github-actions.pem ec2-user@54.163.221.190 << 'EOF'
          
          # 1) DEBUG: Print Environment Variables Inside EC2
          echo "🔹 Checking Environment Variables Inside EC2..."
          echo "AWS_ECR_BACKEND=${{ secrets.AWS_ECR_BACKEND_REPO }}"
          echo "AWS_ECR_FRONTEND=${{ secrets.AWS_ECR_FRONTEND_REPO }}"
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID:0:4 }}********"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY:0:4 }}********"
          echo "RC_TAG=${{ env.RC_TAG }}"

          # 2) SETUP AWS CREDENTIALS (Match Nightly Deployment)
          echo "🔹 Configuring AWS Credentials in EC2..."
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1
          aws configure list || { echo "🔴 AWS CREDENTIALS INVALID"; exit 1; }

          # 3) AUTHENTICATE WITH ECR
          echo "🔹 Authenticating Docker with AWS ECR inside EC2..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${{ secrets.AWS_ECR_BACKEND_REPO }}" || exit 1
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${{ secrets.AWS_ECR_FRONTEND_REPO }}" || exit 1

          # 4) PROMOTE BACKEND IMAGE
          echo "🔹 Promoting backend image: ${{ secrets.AWS_ECR_BACKEND_REPO }} → $RC_TAG"
          aws ecr batch-get-image --repository-name "${{ secrets.AWS_ECR_BACKEND_REPO }}" --image-ids imageTag=latest \
            --query 'images[].imageManifest' --output text > manifest.json || { echo "Backend image not found"; exit 1; }

          aws ecr put-image --repository-name "${{ secrets.AWS_ECR_BACKEND_REPO }}" --image-tag "$RC_TAG" --image-manifest file://manifest.json

          # 5) PROMOTE FRONTEND IMAGE
          echo "🔹 Promoting frontend image: ${{ secrets.AWS_ECR_FRONTEND_REPO }} → $RC_TAG"
          aws ecr batch-get-image --repository-name "${{ secrets.AWS_ECR_FRONTEND_REPO }}" --image-ids imageTag=latest \
            --query 'images[].imageManifest' --output text > manifest.json || { echo "Frontend image not found"; exit 1; }

          aws ecr put-image --repository-name "${{ secrets.AWS_ECR_FRONTEND_REPO }}" --image-tag "$RC_TAG" --image-manifest file://manifest.json

          # 6) DEPLOY CONTAINERS
          echo "🔹 Stopping Old Containers..."
          docker rm -f backend-container frontend-container || true

          echo "🔹 Pulling and Running Backend Container..."
          docker pull "${{ secrets.AWS_ECR_BACKEND_REPO }}:$RC_TAG" || { echo "Backend image pull failed"; exit 1; }
          docker run -d --name backend-container -p 8000:8000 "${{ secrets.AWS_ECR_BACKEND_REPO }}:$RC_TAG"

          echo "🔹 Pulling and Running Frontend Container..."
          docker pull "${{ secrets.AWS_ECR_FRONTEND_REPO }}:$RC_TAG" || { echo "Frontend image pull failed"; exit 1; }
          docker run -d --name frontend-container -p 3000:3000 "${{ secrets.AWS_ECR_FRONTEND_REPO }}:$RC_TAG"

          EOF
