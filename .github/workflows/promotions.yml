name: RC Promotion

on:
  repository_dispatch:
    types: [trigger-rc-promotion]

permissions:
  contents: read

jobs:
  promote-rc:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the infra repo
      - name: Checkout Infra Repository
        uses: actions/checkout@v4

      # 2) Configure AWS CLI in GitHub runner (not strictly necessary for the SSH part, but good for debugging)
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region us-east-1

      # 3) Debug: Show that AWS credentials are correct (in the GH runner environment)
      - name: Verify AWS Credentials & ECR Setup
        run: |
          echo "🔹 AWS_ECR_BACKEND_REPO=${{ secrets.AWS_ECR_BACKEND_REPO }}"
          echo "🔹 AWS_ECR_FRONTEND_REPO=${{ secrets.AWS_ECR_FRONTEND_REPO }}"
          echo "🔹 AWS Caller Identity:"
          aws sts get-caller-identity --query 'Account' --output text

      # 4) Extract release tag from the repository_dispatch event
      - name: Extract Release Version
        id: extract_version
        run: |
          RELEASE_VERSION="${{ github.event.client_payload.release_tag }}"
          if [ -z "$RELEASE_VERSION" ]; then
            echo "❌ ERROR: RELEASE_VERSION is empty!"
            exit 1
          fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RC_TAG=rc${RELEASE_VERSION#v}" >> $GITHUB_ENV
          echo "✅ Release version: $RELEASE_VERSION → Tagging as: rc${RELEASE_VERSION#v}"

      # 5) Save the SSH key to connect to EC2
      - name: Save Private Key for SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > github-actions.pem
          chmod 600 github-actions.pem

      # 6) SSH into EC2 & promote ECR images
      - name: SSH into EC2 & Promote ECR Images
        env:
          AWS_ECR_BACKEND: ${{ secrets.AWS_ECR_BACKEND_REPO }}
          AWS_ECR_FRONTEND: ${{ secrets.AWS_ECR_FRONTEND_REPO }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENCAGE_API_KEY: ${{ secrets.OPENCAGE_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RC_TAG: ${{ env.RC_TAG }}
        run: |
          echo "🚀 Connecting to EC2 and promoting images in ECR..."

          ssh -o StrictHostKeyChecking=no -i github-actions.pem ec2-user@54.163.221.190 << 'EOF'
          
          ################################################################################
          # 1) CREATE AWS CREDENTIALS FILE INSIDE SSH SESSION
          ################################################################################
          echo "🔹 Creating AWS credentials in ~/.aws/"
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

          echo "[default]" > ~/.aws/config
          echo "region=us-east-1" >> ~/.aws/config

          export AWS_CONFIG_FILE=~/.aws/config
          export AWS_SHARED_CREDENTIALS_FILE=~/.aws/credentials

          aws sts get-caller-identity --query 'Account' --output text

          ################################################################################
          # 2) SET ENVIRONMENT VARIABLES FOR REPO NAMES & RC TAG
          ################################################################################
          echo "🔹 Setting environment variables..."
          export AWS_ECR_BACKEND="$AWS_ECR_BACKEND"
          export AWS_ECR_FRONTEND="$AWS_ECR_FRONTEND"
          export RC_TAG="$RC_TAG"
          export DATABASE_URL="$DATABASE_URL"
          export OPENCAGE_API_KEY="$OPENCAGE_API_KEY"

          echo "AWS_ECR_BACKEND=$AWS_ECR_BACKEND"
          echo "AWS_ECR_FRONTEND=$AWS_ECR_FRONTEND"
          echo "RC_TAG=$RC_TAG"

          ################################################################################
          # 3) AUTHENTICATE WITH ECR
          ################################################################################
          echo "🔹 Authenticating Docker with AWS ECR inside EC2..."
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$AWS_ECR_BACKEND"
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$AWS_ECR_FRONTEND"

          ################################################################################
          # 4) PROMOTE BACKEND IMAGE
          ################################################################################
          echo "🔹 Promoting backend image: $AWS_ECR_BACKEND → $RC_TAG"
          aws ecr batch-get-image --repository-name "$AWS_ECR_BACKEND" --image-ids imageTag=latest \
            --query 'images[].imageManifest' --output text > manifest.json || { echo "Backend image not found"; exit 1; }

          aws ecr put-image --repository-name "$AWS_ECR_BACKEND" --image-tag "$RC_TAG" --image-manifest file://manifest.json

          ################################################################################
          # 5) PROMOTE FRONTEND IMAGE
          ################################################################################
          echo "🔹 Promoting frontend image: $AWS_ECR_FRONTEND → $RC_TAG"
          aws ecr batch-get-image --repository-name "$AWS_ECR_FRONTEND" --image-ids imageTag=latest \
            --query 'images[].imageManifest' --output text > manifest.json || { echo "Frontend image not found"; exit 1; }

          aws ecr put-image --repository-name "$AWS_ECR_FRONTEND" --image-tag "$RC_TAG" --image-manifest file://manifest.json

          ################################################################################
          # 6) (OPTIONAL) CREATE .ENV & RUN CONTAINERS
          ################################################################################
          echo "🔹 Creating /backend/.env file..."
          sudo mkdir -p /backend
          sudo tee /backend/.env > /dev/null <<EOT
          DATABASE_URL=$DATABASE_URL
          OPENCAGE_API_KEY=$OPENCAGE_API_KEY
          EOT
          sudo chmod 644 /backend/.env

          echo "🔹 Pulling the RC Backend Image..."
          docker pull "$AWS_ECR_BACKEND:$RC_TAG" || { echo "Backend image pull failed"; exit 1; }

          echo "🔹 Pulling the RC Frontend Image..."
          docker pull "$AWS_ECR_FRONTEND:$RC_TAG" || { echo "Frontend image pull failed"; exit 1; }

          echo "🔹 Stopping Old Containers..."
          docker rm -f backend-container frontend-container || true

          echo "🔹 Running RC Backend..."
          docker run -d --name backend-container -p 8000:8000 --env-file /backend/.env \
            "$AWS_ECR_BACKEND:$RC_TAG" || { echo "Backend container failed to start"; exit 1; }

          echo "🔹 Running RC Frontend..."
          docker run -d --name frontend-container -p 3000:3000 "$AWS_ECR_FRONTEND:$RC_TAG" || { echo "Frontend container failed to start"; exit 1; }

          EOF
